<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<author><name>mbrignall</name></author>
<title>mblognl</title>
<description>moments of clarity, shared.</description>
<generator>Emacs webfeeder.el</generator>
<link>https://blog.mbrig.nl</link>
<atom:link href="https://blog.mbrig.nl/rss.xml" rel="self" type="application/rss+xml"/>
<lastBuildDate>Fri, 19 Sep 2025 17:00:23 +0000</lastBuildDate>
<item>
  <title>Terraform and Terrascan with AWS (Immersive Labs)</title>
  <description><![CDATA[<div id="content" class="content">
 <div id="outline-container-orgc54286f" class="outline-2">
 <h2 id="orgc54286f">Immersive Labs</h2>
 <div class="outline-text-2" id="text-orgc54286f">

 <figure id="org9cbc944"> <img src="https://static-00.iconduck.com/assets.00/terraform-icon-1803x2048-hodrzd3t.png" alt="terraform-icon-1803x2048-hodrzd3t.png" style="margin:auto; display:block; width:200px"></img></figure> <div class="PREVIEW" id="orgc594b76">
 <p>
This post is going to cover my most recent lab "Secure Terraform for AWS". I wanted to present my personal approach on the lab and my experience in general. I'm going to try not to give away too much, just some hints and what to expect if you're considering purchasing licences or you're a learner considering which labs to do next.
</p>

</div>

 <p>
For some time now I've been working through the Immersive Labs career pathways. My focus has been on Incident Response, Malicious File Analysis and Windows Malware, SIEM/Elastic and Event/Log Analysis. I've also completed a lot of the introductory labs that covers Security/Cyber Professional basics.
</p>

 <p>
Having used some similar platforms like Hack the Box and the likes, I can say that the Immersive Labs are well designed with content that is thorough and excellent. If I find myself a bit lost at any point, I can easily flip to the guidance tab and after some perseverance manage to finish the labs with little frustration.
</p>
</div>
</div>

 <div id="outline-container-org8c7637a" class="outline-2">
 <h2 id="org8c7637a">Terraform for AWS</h2>
 <div class="outline-text-2" id="text-org8c7637a">
 <p>
A quick reminder of what Terraform does:
</p>

 <blockquote>
 <p>

</p>

 <p>
Terraform is an open-source tool developed by HashiCorp. Infrastructure is defined in a human-readable format in HashiCorp Language (HCL) or JSON which is processed by Terraform and then deployed into the appropriate target â€“ typically cloud. It's a popular way for companies to manage their infrastructure as code (IaC) and can be used in conjunction with most existing cloud providers. In this lab, we take a look at Terraform in the context of AWS.
</p>
</blockquote>

 <p>
When you start the lab you'll get an overview of both Terraform and Terrascan. Make sure that you read through the information in order to become accustomed as to how they both work and integrate.
</p>



 <figure id="org17005a8"> <img src="../img/tfexample.png" alt="tfexample.png" style="margin:auto; display:block; width:100%"></img> <figcaption> <span class="figure-number">Figure 1: </span>What the console looks like</figcaption></figure></div>

 <div id="outline-container-org533b98e" class="outline-3">
 <h3 id="org533b98e">Episode 1</h3>
 <div class="outline-text-3" id="text-org533b98e">
 <p>
The first labs starts with a simple S3 bucket configuration with some missing scopes/resources. Your job is to make sure that the Terraform HCL passes the Terrascan expected configuration so that the bucket is secure and meets the following expectations:
</p>

 <ul class="org-ul"> <li>Server-side encryption should be enabled</li>
 <li>Public access should not be granted</li>
 <li>Buckets should be private</li>
 <li>Access logging should be enabled and configured to log to another bucket</li>
 <li>Objects should be owned by the bucket owner if they have been uploaded with the bucket-owner-full-control canned ACL</li>
</ul> <figure id="org95a2cae"> <img src="../img/tfexample3.png" alt="tfexample3.png" style="margin:auto; display:block; width:100%"></img> <figcaption> <span class="figure-number">Figure 2: </span>The auto-complete chooser is going to be your friend here ðŸ˜‰</figcaption></figure> <p>
You're going to want to try a validate first in order to get feedback from Terrascan as to what's missing, unless you can tell off the bat and have previous experience in TF. The terminal response is really useful and I used the pointers to look at the official docs in order to work out which Key Value pair was needed.
</p>


 <figure id="orgee3ee73"> <img src="../img/tfexample1.png" alt="tfexample1.png" style="margin:auto; display:block; width:100%"></img> <figcaption> <span class="figure-number">Figure 3: </span>Example of Terrascan in action</figcaption></figure></div>
</div>

 <div id="outline-container-orgb7056cc" class="outline-3">
 <h3 id="orgb7056cc">Episode 2</h3>
 <div class="outline-text-3" id="text-orgb7056cc">
 <p>
Covers KMS keys which are cryptographic keys that can be used to encrypt and secure AWS resources. EBS is also covered in this session which is for scalable block storage and is used as the default when creating volumes for EC2.
</p>

 <p>
As above, I went with the terminal feedback first, by running validate. This gave me the missing resources and configurations I needed to target. The Terraform documents are very clear, respect to Hashicorp for that.
</p>


 <figure id="org9c636a9"> <img src="../img/tfexample2.png" alt="tfexample2.png" style="margin:auto; display:block; width:100%"></img> <figcaption> <span class="figure-number">Figure 4: </span>More action</figcaption></figure> <p>
In summary:
</p>

 <ul class="org-ul"> <li>Run  <code>terraform validate</code> to ensure that declarations are not missing arguments</li>
 <li>Use Terrascan to identify potential security issues and syntax errors</li>
</ul> <p>
I feel this episode was slightly easier and definitely had less points to address.
</p>
</div>
</div>

 <div id="outline-container-org4a974a2" class="outline-3">
 <h3 id="org4a974a2">Episode 3</h3>
 <div class="outline-text-3" id="text-org4a974a2">
 <p>
This episode touches on the Aurora and Relational Database Services (RDS) in AWS. The brief covers the basics of the services and what to look out for in the lab. The goal is to correct the errors and update the resources to securely deploy infrastructure associated with the AWS Aurora service for relational databases (DBs).
</p>

 <p>
This lab has a high and medium alert reported in Terrascan:
</p>

 <ul class="org-ul"> <li> <b>High</b>  <code>aws_rds_cluster.aurora:#36</code></li>
 <li> <b>Medium</b>  <code>aws_rds_cluster_instance.aurora:#49</code></li>
</ul></div>
</div>

 <div id="outline-container-org2ff9bfb" class="outline-3">
 <h3 id="org2ff9bfb">Episode 4 - the finale</h3>
 <div class="outline-text-3" id="text-org2ff9bfb">
 <p>
We reach the final episode which brings some more general security fundamentals and enabling detailed monitoring. Here we learn about how we restrict AWS VPC traffic to EC2 instances by using security groups and custom rules. EC2â€™s instance metadata service (IMDS) can be used to retrieve metadata about running EC2 instances from within the instance.
</p>

 <blockquote>
 <p>
This allows applications running within the instance to access temporary, rotated credentials, avoiding the need for developers to hardcode credentials. However, this metadata should not be available from outside the instance. IMDSv2 ensures that every request to the service is protected by session authentication where session tokens, unusable from outside the instance, are used to create temporary passwords for requests to the metadata service.
</p>
</blockquote>

 <p>
I found this lab slightly more tricky as it was dealing with areas of AWS and resources, data blocks and configuration I'm less familiar with. However the terminal response of Terrascan made the experience fairly straight forward and that paired with using the excellent documentation offered made the Lab enjoyable, informative and filled in some blanks.
</p>
</div>
</div>
</div>

 <div id="outline-container-org94c8a0f" class="outline-2">
 <h2 id="org94c8a0f">Terrascan by Tenable</h2>
 <div class="outline-text-2" id="text-org94c8a0f">
 <p>
 <a href="https://github.com/tenable/terrascanlink">Terrascan GitHub</a>
</p>
</div>
</div>
</div>]]></description>
  <link>https://blog.mbrig.nl/posts/./terraform-and-terrascan.html</link>
  <guid isPermaLink="false">https://blog.mbrig.nl/posts/./terraform-and-terrascan.html</guid>
  <pubDate>Fri, 19 Sep 2025 17:00:23 +0000</pubDate>
</item>
<item>
  <title>Release Monitoring with Automation for Jira</title>
  <description><![CDATA[<div id="content" class="content">
 <div id="outline-container-org1583b75" class="outline-2">
 <h2 id="org1583b75">We like automation, we like monitoring releases  <i class="fa-regular fa-heart"></i></h2>
 <div class="outline-text-2" id="text-org1583b75">
 <div class="PREVIEW" id="orgde575dc">
 <p>
So your organisation has decided to build a Internal Developer Portal (IDP) using Backstage. All of a sudden you're responsible for looking after a quickly growing, forever updating production environment, as well as an IDP?
</p>

</div>

 <p>
You may even have a request from your SEM along the lines of this:
</p>

 <blockquote>
 <p>
Monthly there is a version bump of Backstage (i.e 1.14.x -> 1.15.0)
We need to keep up with these releases as this reduces issues with security etc - however with this release we also need to update the plugin dependencies.
</p>
</blockquote>

 <p>
What do you do about:
</p>

 <ul class="org-ul"> <li>Monitoring new releases</li>
 <li>Making decisions about new features</li>
 <li>Breaking changes</li>
 <li>Plugins breaking</li>
</ul> <p>
You monitor the releases in a Jira project backlog of course!
</p>
</div>
</div>

 <div id="outline-container-orgcf5bfad" class="outline-2">
 <h2 id="orgcf5bfad">Here is how I did it with automationâ€¦  <i class="fa-solid fa-robot"></i></h2>
 <div class="outline-text-2" id="text-orgcf5bfad">
 <p>
I wanted to create a new task whenever a new release of Backstage is rolled out on the main Github page  <i class="fa-brands fa-github-alt"></i>  <a href="https://github.com/backstage/backstage">backstage/backstage</a>. The task could then be broken down into smaller pieces of work or spikes so I could monitor builds or raise pull requests directly from Jira using the GitHub integration.
</p>
</div>
</div>

 <div id="outline-container-org4852c44" class="outline-2">
 <h2 id="org4852c44">Setting up the Schedule  <i class="fa-regular fa-calendar"></i></h2>
 <div class="outline-text-2" id="text-org4852c44">
 <p>
For the scheduled automation to work I created a custom field in Jira called 'Release Tag', which is where the release tag will be stored.
</p>

 <p>
The specifics of the JQL might need adjusting depending on your circumstances but an example may go like:
</p>

 <p>
 <code>issuetype = epic and 'Release Tag' is not EMPTY</code>
</p>

 <p>
Because the scheduled automation requires a ticket to be present I had to make a 'dummy' ticket with the release tag of a previous release added to it, so when the schedule runs the JQL can find a ticket and trigger the subsequent automation. There is a space at the bottom of the following example when you're creating a scheduled automation to add JQL.
</p>


 <figure id="org53d4531"> <img src="../img/afj-release.png" alt="afj-release.png" style="margin:auto; display:block; width:400px"></img> <figcaption> <span class="figure-number">Figure 1: </span>Schedule the Automation</figcaption></figure></div>
</div>

 <div id="outline-container-orgd6a6dd2" class="outline-2">
 <h2 id="orgd6a6dd2">The Web Request  <i class="fa-solid fa-globe"></i></h2>
 <div class="outline-text-2" id="text-orgd6a6dd2">
 <p>
The automation will make a request to a public endpoint, so there was need for a Personal Access Token (PAT). Since the request frequency is once a day, it remains within rate limits. The request is made to the following URL:
</p>

 <p>
 <a href="https://api.github.com/repos/backstage/backstage/releases/latest">API for Latest Release</a>
</p>

 <p>
Then I added optional headers to ensure the content type is correctly interpreted:
</p>

 <p>
 <code>Content-Type: application/json</code>
</p>

 <p>
This is a GET HTTP method, and I didn't anticipate any issue references in the body, simply can choose 'Empty'.
</p>

 <p>
 <b>It's crucial to delay execution until we receive a response from this web request!</b>
</p>


 <figure id="org5238399"> <img src="../img/afj-release-3.png" alt="afj-release-3.png" style="margin:auto; display:block; width:400px"></img> <figcaption> <span class="figure-number">Figure 2: </span>Web Request Example</figcaption></figure></div>
</div>

 <div id="outline-container-org861d832" class="outline-2">
 <h2 id="org861d832">Create Variable  <i class="fa-solid fa-check"></i></h2>
 <div class="outline-text-2" id="text-org861d832">
 <p>
The web response body will look a bit like the snipped example:
</p>

 <div class="org-src-container">
 <pre class="src src-js">}
   <span class="org-comment-delimiter">// </span> <span class="org-comment">...
</span>   <span class="org-string">"node_id"</span>:  <span class="org-string">"RE_kwDODhKIWM4Gb0sX"</span>,
   <span class="org-string">"tag_name"</span>:  <span class="org-string">"v1.14.2"</span>,
   <span class="org-string">"target_commitish"</span>:  <span class="org-string">"master"</span>,
   <span class="org-string">"name"</span>:  <span class="org-string">"v1.14.2"</span>,
   <span class="org-string">"draft"</span>:  <span class="org-constant">false</span>,
   <span class="org-string">"prerelease"</span>:  <span class="org-constant">false</span>,
   <span class="org-string">"created_at"</span>:  <span class="org-string">"2023-06-09T09:30:18Z"</span>,
   <span class="org-string">"published_at"</span>:  <span class="org-string">"2023-06-09T09:30:19Z"</span>,
   <span class="org-string">"assets"</span>: [

  ],
   <span class="org-string">"tarball_url"</span>:  <span class="org-string">"https://api.github.com/repos/backstage/backstage/tarball/v1.14.2"</span>,
   <span class="org-string">"zipball_url"</span>:  <span class="org-string">"https://api.github.com/repos/backstage/backstage/zipball/v1.14.2"</span>,
   <span class="org-string">"body"</span>:  <span class="org-string">"This release fixes an issue where the search bar styling would break."</span>,
  <span class="org-comment-delimiter">// </span> <span class="org-comment">...
</span>}
</pre>
</div>

 <p>
To extract the  <code>tag_name</code>, I created a variable using the newer feature, referring to the  <code>{{webResponse.body}}</code> (the curly brackets are to use Jira smart values) to retrieve the response body, and then pointing to the  <code>tag_name</code>. This creates a variable named  <code>backstageLatest</code> that can be referenced in subsequent actions.
</p>


 <figure id="org906d681"> <img src="../img/afj-release-1.png" alt="afj-release-1.png" style="margin:auto; display:block; width:400px"></img> <figcaption> <span class="figure-number">Figure 3: </span>Release Tag Variable</figcaption></figure></div>
</div>

 <div id="outline-container-org025c85e" class="outline-2">
 <h2 id="org025c85e">Create a new ticket  <i class="fa-solid fa-ticket"></i></h2>
 <div class="outline-text-2" id="text-org025c85e">
 <p>
I then used the 'If: Matches' conditional module to verify if  <code>backstageLatest</code> is greater than the release number in the custom release field. If it is, then I want to create a new ticket in the backlog with:
</p>

 <ul class="org-ul"> <li>Summary: Backstage  <code>{{backstageLatest}}</code> New Release</li>

 <li>Description:  <code>{{webResponse.body.body}}</code></li>

 <li>Label: On-going Backstage Maintenance</li>
</ul> <p>
If the conditions don't match, the automation doesn't perform any actions.
</p>


 <figure id="orge04081c"> <img src="../img/afj-release-2.png" alt="afj-release-2.png" style="margin:auto; display:block; width:400px"></img> <figcaption> <span class="figure-number">Figure 4: </span>Backstage Latest Variable</figcaption></figure></div>
</div>

 <div id="outline-container-org8363e66" class="outline-2">
 <h2 id="org8363e66">Conclusion  <i class="fa-solid fa-flag-checkered"></i></h2>
 <div class="outline-text-2" id="text-org8363e66">
 <p>
By following the above steps, you can set up a process to automatically monitor GitHub releases and track your dependencies. This will save you time and effort to manually check for new releases.
</p>

 <p>
Future suggestions/ideas:
</p>

 <ul class="org-ul"> <li>Trigger builds in your CI/CD if conditionals pass, or a status matches 'release'</li>

 <li>Enrich tickets but using Key Values from the json response to further automate the process</li>

 <li> <p>
Use this idea for other dependencies
</p>

 <p>
If you have any other ideas or questions please reach out.  <i class="fa-regular fa-heart"></i>
</p></li>
</ul></div>
</div>
</div>]]></description>
  <link>https://blog.mbrig.nl/posts/./release-monitoring-in-jira.html</link>
  <guid isPermaLink="false">https://blog.mbrig.nl/posts/./release-monitoring-in-jira.html</guid>
  <pubDate>Fri, 19 Sep 2025 17:00:23 +0000</pubDate>
</item>
<item>
  <title>Exploring 9front and Plan 9</title>
  <description><![CDATA[<div id="content" class="content">
 <div id="outline-container-org9d1e588" class="outline-2">
 <h2 id="org9d1e588">Why 9front?</h2>
 <div class="outline-text-2" id="text-org9d1e588">

 <figure id="org49bc1a1"> <img src="http://9front.org/img/thistimedefinitely.front.png" alt="thistimedefinitely.front.png" style="float:left; margin-right: 15px; vertical-align: bottom;" width="200px"></img></figure> <p>
Over the holiday period I took the steps towards fully exploring the 9front/Plan 9 ecosystem. It has turned up on the radar for some time now, however if my memory treats me correctly, the first exposure I was overwhelmed. Recently I discovered  <a href="https://www.youtube.com/channel/UC7qFfPYl0t8Cq7auyblZqxA">adventuresin9</a> YouTube channel randomly which sprouted the interest again. After trying out 9front on VM via Proxmox I decided that I needed to experience it on bare metal.
</p>

 <p>
This led to a couple of quests with older laptops to bring them back to life in order to get them running this lesser known OS.
</p>

 <p>
There was something about the stark, minimalist approach, the art on the cover of the purchased manual, and the general demeanour of the contributors that hooked me. It's hard to explain but I liken it to finding a band you'd never heard of from a past era and then finding out they have a sprawling back catalogue to digest.
</p>

 <p>
Also, with my interest in the C language, finding out that 9front has it's own dialect and that the whole OS is written in less than 6000 lines I felt this may be a place to learn about operating system architecture and kernels etc
This space will evolve as I experiment, explore, and expand my knowledge.
</p>
</div>
</div>
 <div id="outline-container-orge308ebf" class="outline-2">
 <h2 id="orge308ebf">What have I done so far?</h2>
 <div class="outline-text-2" id="text-orge308ebf">
 <p>
Here is a list of the hardware I've managed to get 9front to run on:
</p>
</div>

 <div id="outline-container-orgad9cf6e" class="outline-3">
 <h3 id="orgad9cf6e">Thinkpad T420:</h3>
 <div class="outline-text-3" id="text-orgad9cf6e">

 <figure id="org5698c97"> <img src="../img/thinkpad.jpg" alt="thinkpad.jpg" style="float:left; margin-right: 15px; vertical-align: bottom;" width="200px"></img></figure> <p>
I found one of these laptops on Facebook marketplace for Â£10 including the power adaptor. Initial thoughts was that the hardware was in pretty good condition given the age. However the laptop did not boot. I would get the initial green power led but then nothing. After searching online and diving into a variety of vintage posts I came to the conclusion that the system board must be kaput.
</p>

 <p>
Luckily replacement parts for this model is still readily available on eBay etc. so I ordered a new motherboard from Latvia. This took a couple of weeks to arrive and once received I was eager to give it a crack
</p>

 <p>
I have experience in fixing 'things' but this was my first laptop motherboard replacement. Once observation that really sticks out is the ease of replacing components in these devices. In more recent laptops I've opened up they seem difficult to get to the 'guts'. The whole replacement took about an hour from scratch and I only had 2 leftover screws!
</p>

 <p>
The laptop understandably was missing a sdd so I added my own Kingston 120gb. There was an extra 4gb RAM in the 2nd port which gives the laptop 8gb in total.
</p>

 <p>
The install is covered below and mostly I followed  <a href="https://9lab.org/plan9/thinkpad-t420s/">9lab Thinkpad T420 guide</a> this helped with the wifi firmware and getting the initial boot working. Key benefit was getting the firmware:
</p>

 <pre class="example">
% ramfs ; cd /tmp
% hget -o iwn-firmware-5.11p1.tgz \
  http://firmware.openbsd.org/firmware/6.9/iwn-firmware-5.11p1.tgz
% tar xzf iwn-firmware-5.11p1.tgz
% cp firmware/iwn-6005 /lib/firmware
</pre>

 <p>
Once booted and I followed the install guide, running  <code>inst/start</code> and following the prompts, it was pretty straightforward. I didn't sway from the defaults for this laptop, using the default fs and partition suggestions.
</p>
</div>
</div>

 <div id="outline-container-org7e074b8" class="outline-3">
 <h3 id="org7e074b8">Raspberry Pi 3b</h3>
 <div class="outline-text-3" id="text-org7e074b8">
 <p>
I installed 9front on a Raspberry Pi 3b which is running 9front successfully. There was a couple of guides that helped along the way:
</p>

 <ul class="org-ul"> <li> <a href="https://luksamuk.codes/posts/plan9-setup-rpi.html">Plan 9: Setting up 9front on a Raspberry Pi</a></li>
 <li> <a href="https://julienblanchard.com/posts/setting-up-a-9front-cpu-server-on-a-raspberry-pi-4.html">Setting up a 9front CPU server on a Raspberry Pi 4</a></li>
</ul></div>
</div>
</div>

 <div id="outline-container-orgc61a76f" class="outline-2">
 <h2 id="orgc61a76f">Next Steps</h2>
 <div class="outline-text-2" id="text-orgc61a76f">
</div>
 <div id="outline-container-org519bae2" class="outline-3">
 <h3 id="org519bae2">Connect to wifi</h3>
 <div class="outline-text-3" id="text-org519bae2">
 <div class="org-src-container">
 <pre class="src src-rc">bind -a '#l1' /net
aux/wpa -s <SSID> -p /net/ether1
# Enter password when prompted...
ip/ipconfig
</pre>
</div>

 <p>
To test connectivity you can try:  <code>ip/ping 8.8.8.8</code> for example and you should get a positive response.
</p>

 <p>
I then moved to something more reliable that I got from the 9lab guide above. The script runs on boot and you can choose to fix to an SSID or skip to desktop.
</p>

 <p>
Note: If you get the password incorrect you're going to see a DHCP error. So far my only way to reset this is to  <code>fshalt -r</code> reboot the system and try again, this is super annoying when you have a dodgy key char in the password. ðŸ« 
</p>
</div>
</div>

 <div id="outline-container-org0fc2ea8" class="outline-3">
 <h3 id="org0fc2ea8">Man Pages</h3>
 <div class="outline-text-3" id="text-org0fc2ea8">
 <p>
 <a href="https://man.9front.org/">man.9front.org</a>
</p>

 <p>
This is the way to read about built in functions, commands and applications. I use  <code>lookman</code> a lot to find words in man pages and then load the page by  <code>man <subject></code> for example:
</p>

 <p>
 <code>man wpa</code>
</p>

 <p>
returns:
</p>

 <pre class="example">
WPA(8)                                                     WPA(8)

NAME
     wpa - Wi-Fi Protected Access setup

SYNOPSIS
     aux/wpa [ -dp12 ] [ -s essid ] dev

DESCRIPTION
     Wpa handles the authentication and key exchange with WPA
     protected wireless networks.

     The dev parameter specifies the network interface that needs
     to be setup with WPA.  The essid can be set with the -s
     option. Otherwise, the previously configured essid on the
     interface will be used.  The -p option will prompt and
     install the preshared key or pap/chap credentials into fac-
     totum, otherwise the key has to be already present in facto-
     tum or an interactive key prompter like auth/fgui (see
     factotum(4)) needs to provide it.

     The authentication protocol is initiated by the wireless
     access point so wpa will background itself after the
     keyprompt and establish the encryption automatically as
     needed.  The optional -1 or -2 arguments can be used to
     select between WPA1/TKIP (default) or WPA2/CCMP encryption
     with WPA PSK.

     The -d option enables debugging and causes wpa to stay in
     foreground writing protocol messages to standard error.

EXAMPLES
     Setup wireless encryption:
     % bind -a '#l1' /net
     % aux/wpa -s 9HAL -p /net/ether1
     !Adding key: proto=wpapsk essid=9HAL
     password: *****
     !
     % ip/ipconfig ether /net/ether1

SOURCE
     /sys/src/cmd/aux/wpa.c

SEE ALSO
     factotum(4), ipconfig(8)

HISTORY
     Wpa first appeared in 9front (March, 2013).
</pre>

 <p>
As you can see, the man pages are well structured and thorough.
</p>
</div>
</div>

 <div id="outline-container-orgced87de" class="outline-3">
 <h3 id="orgced87de">USB Storage</h3>
 <div class="outline-text-3" id="text-orgced87de">
 <p>
The USB storage mounts on  <code>/shr/<device-name></code> and I moved the files straight from there. I think there may be mount option just like Linux/Unix but I've not worked that out but there is a man mapge.
</p>
</div>
</div>

 <div id="outline-container-orgf5f6fc6" class="outline-3">
 <h3 id="orgf5f6fc6">Uxn</h3>
 <div class="outline-text-3" id="text-orgf5f6fc6">
 <p>
I wanted to explore that ecosystem from within 9front. If you've not come across Uxn/HundredRabbits please check them out.
</p>
</div>
</div>

 <div id="outline-container-org65e1f56" class="outline-3">
 <h3 id="org65e1f56">Web Browsing</h3>
 <div class="outline-text-3" id="text-org65e1f56">
 <p>
I have installed  <a href="https://github.com/netsurf-plan9/nsport">Netsurf</a> (the alternative browser) and there is also Mothra which is really cool. Both provide very minimal web experiences, with Mothra not supporting any JS or 'modern' browsing experiences. To be fair, most of my browsing is reading code or docs/blogs which render fine. I even checked out this blog which translates really well.
</p>
</div>
</div>
</div>

 <div id="outline-container-org5748ebe" class="outline-2">
 <h2 id="org5748ebe">Future</h2>
</div>

 <div id="outline-container-org776e362" class="outline-2">
 <h2 id="org776e362">Useful Resources</h2>
 <div class="outline-text-2" id="text-org776e362">
 <ul class="org-ul"> <li> <a href="https://www.youtube.com/channel/UC7qFfPYl0t8Cq7auyblZqxA">adventuresin9</a> (YouTube)</li>
 <li> <a href="https://9p.io/wiki/plan9/plan_9_wiki/">Plan 9 wiki</a></li>
 <li> <a href="https://9front.org/">9 front</a></li>
 <li> <a href="https://www.amazon.co.uk/s?k=9front&crid=132YLI7HQ5LJN&sprefix=9front%2Caps%2C88&ref=nb_sb_noss">Amazon 9front manuals</a></li>
</ul></div>
</div>
</div>]]></description>
  <link>https://blog.mbrig.nl/posts/./exploring-9front.html</link>
  <guid isPermaLink="false">https://blog.mbrig.nl/posts/./exploring-9front.html</guid>
  <pubDate>Fri, 19 Sep 2025 17:00:23 +0000</pubDate>
</item>
<item>
  <title>Emacs with aspell/ispell on Nix Darwin</title>
  <description><![CDATA[<div id="content" class="content">
 <div id="outline-container-org4eb0474" class="outline-2">
 <h2 id="org4eb0474">British English and Emacs</h2>
 <div class="outline-text-2" id="text-org4eb0474">
 <div class="PREVIEW" id="org9d8d6eb">
 <p>
I like writing and was keen to introduce an on-the-fly spellchecker in Emacs. Ispell is built in to the current version I'm using (29.1). However it was locked to the default US dictionary. Easy fix right?
</p>

</div>
</div>

 <div id="outline-container-orgd0453c2" class="outline-3">
 <h3 id="orgd0453c2">Discoveries</h3>
 <div class="outline-text-3" id="text-orgd0453c2">
 <p>
Out the box the latest version of ispell on Nix Packages and built in Emacs does not have UK/British English default. So I started looking on Reddit and Googled ispell and Nix to see where I could go.
</p>
</div>
</div>

 <div id="outline-container-orgaf76655" class="outline-3">
 <h3 id="orgaf76655">Emacs philosophy and approach</h3>
 <div class="outline-text-3" id="text-orgaf76655">
 <p>
I am a strong believer in keeping things simple and with the introduction of 'use-package' and the extra features in 29.1 I was keen to rewrite my config and use as close to vanilla setup as possible. I took the very base of what was needed and started from scratch building outward and exploring built-in packages. My config file is available here:  <a href="https://github.com/mbrignall/nix-darwin">nix-darwin repo</a>
</p>
</div>
</div>

 <div id="outline-container-org2fa46f2" class="outline-3">
 <h3 id="org2fa46f2">Emacs Aspell/Ispell config</h3>
 <div class="outline-text-3" id="text-org2fa46f2">
 <p>
Add this to your  <code>init.el</code>:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp"> <span class="org-comment-delimiter">;; </span> <span class="org-comment">Spellcheck
</span>( <span class="org-keyword">require</span> ' <span class="org-constant">ispell</span>)
( <span class="org-keyword">setq</span> ispell-program-name  <span class="org-string">"aspell"</span>)

( <span class="org-keyword">dolist</span> (hook '(text-mode-hook))
  (add-hook hook ( <span class="org-keyword">lambda</span> () (flyspell-mode 1))))
</pre>
</div>
</div>
</div>

 <div id="outline-container-org446f3d6" class="outline-3">
 <h3 id="org446f3d6">NixOS/ Nix Darwin</h3>
 <div class="outline-text-3" id="text-org446f3d6">
 <p>
With the emphasis on declarative, reproducible systems, I've been using Nix for some time now. I have a config for Linux/NixOS outside of work, when at work I use a Macbook so have a Nix Darwin build for that. The addition of  <code>aspell</code> with dictionaries was surprisingly simple once I'd worked out how to declare it in my configuration file:
</p>

 <p>
</p> <pre class="src src-nix">
 <span class="org-comment-delimiter"># </span> <span class="org-comment">System Packages</span>
 <span class="org-keyword">environment.systemPackages</span> = with  <span class="org-constant">pkgs</span>; [
 <span class="org-comment-delimiter">  # </span> <span class="org-comment">Applications</span>
  ( <span class="org-keyword">aspellWithDicts</span> ( <span class="org-constant">dicts:</span> with dicts;  <span class="org-string">[ en en-computers en-science ]</span>))
 <span class="org-constant">  ispell</span>
 <span class="org-comment-delimiter">  # </span> <span class="org-comment">Other Packages</span>
];</pre>

</div>
</div>
</div>
</div>]]></description>
  <link>https://blog.mbrig.nl/posts/./emacs-ispell-aspell.html</link>
  <guid isPermaLink="false">https://blog.mbrig.nl/posts/./emacs-ispell-aspell.html</guid>
  <pubDate>Fri, 19 Sep 2025 17:00:23 +0000</pubDate>
</item>
</channel>
</rss>
