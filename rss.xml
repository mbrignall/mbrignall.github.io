<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<author><name>mbrignall</name></author>
<title>mblognl</title>
<description>moments of clarity, shared.</description>
<generator>Emacs webfeeder.el</generator>
<link>https://blog.mbrig.nl</link>
<atom:link href="https://blog.mbrig.nl/rss.xml" rel="self" type="application/rss+xml"/>
<lastBuildDate>Sat, 08 Feb 2025 19:15:13 +0000</lastBuildDate>
<item>
  <title>Terraform and Terrascan with AWS (Immersive Labs)</title>
  <description><![CDATA[<div id="content" class="content">
 <div id="outline-container-org367941d" class="outline-2">
 <h2 id="org367941d">Immersive Labs</h2>
 <div class="outline-text-2" id="text-org367941d">

 <figure id="org6fe5892"> <img src="https://static-00.iconduck.com/assets.00/terraform-icon-1803x2048-hodrzd3t.png" alt="terraform-icon-1803x2048-hodrzd3t.png" style="margin:auto; display:block; width:200px"></img></figure> <div class="PREVIEW" id="orgba25518">
 <p>
This post is going to cover my most recent lab "Secure Terraform for AWS". I wanted to present my personal approach on the lab and my experience in general. I'm going to try not to give away too much, just some hints and what to expect if you're considering purchasing licences or you're a learner considering which labs to do next.
</p>

</div>

 <p>
For some time now I've been working through the Immersive Labs career pathways. My focus has been on Incident Response, Malicious File Analysis and Windows Malware, SIEM/Elastic and Event/Log Analysis. I've also completed a lot of the introductory labs that covers Security/Cyber Professional basics.
</p>

 <p>
Having used some similar platforms like Hack the Box and the likes, I can say that the Immersive Labs are well designed with content that is thorough and excellent. If I find myself a bit lost at any point, I can easily flip to the guidance tab and after some perseverance manage to finish the labs with little frustration.
</p>
</div>
</div>

 <div id="outline-container-org3ebc7d2" class="outline-2">
 <h2 id="org3ebc7d2">Terraform for AWS</h2>
 <div class="outline-text-2" id="text-org3ebc7d2">
 <p>
A quick reminder of what Terraform does:
</p>

 <blockquote>
 <p>

</p>

 <p>
Terraform is an open-source tool developed by HashiCorp. Infrastructure is defined in a human-readable format in HashiCorp Language (HCL) or JSON which is processed by Terraform and then deployed into the appropriate target â€“ typically cloud. It's a popular way for companies to manage their infrastructure as code (IaC) and can be used in conjunction with most existing cloud providers. In this lab, we take a look at Terraform in the context of AWS.
</p>
</blockquote>

 <p>
When you start the lab you'll get an overview of both Terraform and Terrascan. Make sure that you read through the information in order to become accustomed as to how they both work and integrate.
</p>



 <figure id="orgd76044b"> <img src="../tfexample.png" alt="tfexample.png" style="margin:auto; display:block; width:100%"></img> <figcaption> <span class="figure-number">Figure 1: </span>What the console looks like</figcaption></figure></div>

 <div id="outline-container-org57992ff" class="outline-3">
 <h3 id="org57992ff">Episode 1</h3>
 <div class="outline-text-3" id="text-org57992ff">
 <p>
The first labs starts with a simple S3 bucket configuration with some missing scopes/resources. Your job is to make sure that the Terraform HCL passes the Terrascan expected configuration so that the bucket is secure and meets the following expectations:
</p>

 <ul class="org-ul"> <li>Server-side encryption should be enabled</li>
 <li>Public access should not be granted</li>
 <li>Buckets should be private</li>
 <li>Access logging should be enabled and configured to log to another bucket</li>
 <li>Objects should be owned by the bucket owner if they have been uploaded with the bucket-owner-full-control canned ACL</li>
</ul> <figure id="orga2d5e01"> <img src="../tfexample3.png" alt="tfexample3.png" style="margin:auto; display:block; width:100%"></img> <figcaption> <span class="figure-number">Figure 2: </span>The auto-complete chooser is going to be your friend here ðŸ˜‰</figcaption></figure> <p>
You're going to want to try a validate first in order to get feedback from Terrascan as to what's missing, unless you can tell off the bat and have previous experience in TF. The terminal response is really useful and I used the pointers to look at the official docs in order to work out which Key Value pair was needed.
</p>


 <figure id="org71a0ca7"> <img src="../tfexample1.png" alt="tfexample1.png" style="margin:auto; display:block; width:100%"></img> <figcaption> <span class="figure-number">Figure 3: </span>Example of Terrascan in action</figcaption></figure></div>
</div>

 <div id="outline-container-org2a4473e" class="outline-3">
 <h3 id="org2a4473e">Episode 2</h3>
 <div class="outline-text-3" id="text-org2a4473e">
 <p>
Covers KMS keys which are cryptographic keys that can be used to encrypt and secure AWS resources. EBS is also covered in this session which is for scalable block storage and is used as the default when creating volumes for EC2.
</p>

 <p>
As above, I went with the terminal feedback first, by running validate. This gave me the missing resources and configurations I needed to target. The Terraform documents are very clear, respect to Hashicorp for that.
</p>


 <figure id="org0eadbb1"> <img src="../tfexample2.png" alt="tfexample2.png" style="margin:auto; display:block; width:100%"></img> <figcaption> <span class="figure-number">Figure 4: </span>More action</figcaption></figure> <p>
In summary:
</p>

 <ul class="org-ul"> <li>Run  <code>terraform validate</code> to ensure that declarations are not missing arguments</li>
 <li>Use Terrascan to identify potential security issues and syntax errors</li>
</ul> <p>
I feel this episode was slightly easier and definitely had less points to address.
</p>
</div>
</div>

 <div id="outline-container-orgfc0980b" class="outline-3">
 <h3 id="orgfc0980b">Episode 3</h3>
 <div class="outline-text-3" id="text-orgfc0980b">
 <p>
This episode touches on the Aurora and Relational Database Services (RDS) in AWS. The brief covers the basics of the services and what to look out for in the lab. The goal is to correct the errors and update the resources to securely deploy infrastructure associated with the AWS Aurora service for relational databases (DBs).
</p>

 <p>
This lab has a high and medium alert reported in Terrascan:
</p>

 <ul class="org-ul"> <li> <b>High</b>  <code>aws_rds_cluster.aurora:#36</code></li>
 <li> <b>Medium</b>  <code>aws_rds_cluster_instance.aurora:#49</code></li>
</ul></div>
</div>

 <div id="outline-container-org15dd5d7" class="outline-3">
 <h3 id="org15dd5d7">Episode 4 - the finale</h3>
 <div class="outline-text-3" id="text-org15dd5d7">
 <p>
We reach the final episode which brings some more general security fundamentals and enabling detailed monitoring. Here we learn about how we restrict AWS VPC traffic to EC2 instances by using security groups and custom rules. EC2â€™s instance metadata service (IMDS) can be used to retrieve metadata about running EC2 instances from within the instance.
</p>

 <blockquote>
 <p>
This allows applications running within the instance to access temporary, rotated credentials, avoiding the need for developers to hardcode credentials. However, this metadata should not be available from outside the instance. IMDSv2 ensures that every request to the service is protected by session authentication where session tokens, unusable from outside the instance, are used to create temporary passwords for requests to the metadata service.
</p>
</blockquote>

 <p>
I found this lab slightly more tricky as it was dealing with areas of AWS and resources, data blocks and configuration I'm less familiar with. However the terminal response of Terrascan made the experience fairly straight forward and that paired with using the excellent documentation offered made the Lab enjoyable, informative and filled in some blanks.
</p>
</div>
</div>
</div>

 <div id="outline-container-orgeb5edb8" class="outline-2">
 <h2 id="orgeb5edb8">Terrascan by Tenable</h2>
 <div class="outline-text-2" id="text-orgeb5edb8">
 <p>
 <a href="https://github.com/tenable/terrascanlink">Terrascan GitHub</a>
</p>
</div>
</div>
</div>]]></description>
  <link>https://blog.mbrig.nl/posts/./terraform-and-terrascan.html</link>
  <guid isPermaLink="false">https://blog.mbrig.nl/posts/./terraform-and-terrascan.html</guid>
  <pubDate>Sat, 08 Feb 2025 19:15:13 +0000</pubDate>
</item>
<item>
  <title>Release Monitoring with Automation for Jira</title>
  <description><![CDATA[<div id="content" class="content">
 <div id="outline-container-org98edf2f" class="outline-2">
 <h2 id="org98edf2f">We like automation, we like monitoring releases  <i class="fa-regular fa-heart"></i></h2>
 <div class="outline-text-2" id="text-org98edf2f">
 <div class="PREVIEW" id="org449e9b6">
 <p>
So your organisation has decided to build a Internal Developer Portal (IDP) using Backstage. All of a sudden you're responsible for looking after a quickly growing, forever updating production environment, as well as an IDP?
</p>

</div>

 <p>
You may even have a request from your SEM along the lines of this:
</p>

 <blockquote>
 <p>
Monthly there is a version bump of Backstage (i.e 1.14.x -> 1.15.0)
We need to keep up with these releases as this reduces issues with security etc - however with this release we also need to update the plugin dependencies.
</p>
</blockquote>

 <p>
What do you do about:
</p>

 <ul class="org-ul"> <li>Monitoring new releases</li>
 <li>Making decisions about new features</li>
 <li>Breaking changes</li>
 <li>Plugins breaking</li>
</ul> <p>
You monitor the releases in a Jira project backlog of course!
</p>
</div>
</div>

 <div id="outline-container-orgcf3ff1d" class="outline-2">
 <h2 id="orgcf3ff1d">Here is how I did it with automationâ€¦  <i class="fa-solid fa-robot"></i></h2>
 <div class="outline-text-2" id="text-orgcf3ff1d">
 <p>
I wanted to create a new task whenever a new release of Backstage is rolled out on the main Github page  <i class="fa-brands fa-github-alt"></i>  <a href="https://github.com/backstage/backstage">backstage/backstage</a>. The task could then be broken down into smaller pieces of work or spikes so I could monitor builds or raise pull requests directly from Jira using the GitHub integration.
</p>
</div>
</div>

 <div id="outline-container-orga9b4885" class="outline-2">
 <h2 id="orga9b4885">Setting up the Schedule  <i class="fa-regular fa-calendar"></i></h2>
 <div class="outline-text-2" id="text-orga9b4885">
 <p>
For the scheduled automation to work I created a custom field in Jira called 'Release Tag', which is where the release tag will be stored.
</p>

 <p>
The specifics of the JQL might need adjusting depending on your circumstances but an example may go like:
</p>

 <p>
 <code>issuetype = epic and 'Release Tag' is not EMPTY</code>
</p>

 <p>
Because the scheduled automation requires a ticket to be present I had to make a 'dummy' ticket with the release tag of a previous release added to it, so when the schedule runs the JQL can find a ticket and trigger the subsequent automation. There is a space at the bottom of the following example when you're creating a scheduled automation to add JQL.
</p>


 <figure id="org650046f"> <img src="../afj-release.png" alt="afj-release.png" style="margin:auto; display:block; width:400px"></img> <figcaption> <span class="figure-number">Figure 1: </span>Schedule the Automation</figcaption></figure></div>
</div>

 <div id="outline-container-org0d931cc" class="outline-2">
 <h2 id="org0d931cc">The Web Request  <i class="fa-solid fa-globe"></i></h2>
 <div class="outline-text-2" id="text-org0d931cc">
 <p>
The automation will make a request to a public endpoint, so there was need for a Personal Access Token (PAT). Since the request frequency is once a day, it remains within rate limits. The request is made to the following URL:
</p>

 <p>
 <a href="https://api.github.com/repos/backstage/backstage/releases/latest">API for Latest Release</a>
</p>

 <p>
Then I added optional headers to ensure the content type is correctly interpreted:
</p>

 <p>
 <code>Content-Type: application/json</code>
</p>

 <p>
This is a GET HTTP method, and I didn't anticipate any issue references in the body, simply can choose 'Empty'.
</p>

 <p>
 <b>It's crucial to delay execution until we receive a response from this web request!</b>
</p>


 <figure id="orgedc2106"> <img src="../afj-release-3.png" alt="afj-release-3.png" style="margin:auto; display:block; width:400px"></img> <figcaption> <span class="figure-number">Figure 2: </span>Web Request Example</figcaption></figure></div>
</div>

 <div id="outline-container-org1f89cda" class="outline-2">
 <h2 id="org1f89cda">Create Variable  <i class="fa-solid fa-check"></i></h2>
 <div class="outline-text-2" id="text-org1f89cda">
 <p>
The web response body will look a bit like the snipped example:
</p>

 <div class="org-src-container">
 <pre class="src src-js">}
   <span class="org-comment-delimiter">// </span> <span class="org-comment">...</span>
   <span class="org-string">"node_id"</span>:  <span class="org-string">"RE_kwDODhKIWM4Gb0sX"</span>,
   <span class="org-string">"tag_name"</span>:  <span class="org-string">"v1.14.2"</span>,
   <span class="org-string">"target_commitish"</span>:  <span class="org-string">"master"</span>,
   <span class="org-string">"name"</span>:  <span class="org-string">"v1.14.2"</span>,
   <span class="org-string">"draft"</span>:  <span class="org-constant">false</span>,
   <span class="org-string">"prerelease"</span>:  <span class="org-constant">false</span>,
   <span class="org-string">"created_at"</span>:  <span class="org-string">"2023-06-09T09:30:18Z"</span>,
   <span class="org-string">"published_at"</span>:  <span class="org-string">"2023-06-09T09:30:19Z"</span>,
   <span class="org-string">"assets"</span>: [

  ],
   <span class="org-string">"tarball_url"</span>:  <span class="org-string">"https://api.github.com/repos/backstage/backstage/tarball/v1.14.2"</span>,
   <span class="org-string">"zipball_url"</span>:  <span class="org-string">"https://api.github.com/repos/backstage/backstage/zipball/v1.14.2"</span>,
   <span class="org-string">"body"</span>:  <span class="org-string">"This release fixes an issue where the search bar styling would break."</span>,
  <span class="org-comment-delimiter">// </span> <span class="org-comment">...</span>
}
</pre>
</div>

 <p>
To extract the  <code>tag_name</code>, I created a variable using the newer feature, referring to the  <code>{{webResponse.body}}</code> (the curly brackets are to use Jira smart values) to retrieve the response body, and then pointing to the  <code>tag_name</code>. This creates a variable named  <code>backstageLatest</code> that can be referenced in subsequent actions.
</p>


 <figure id="orgd94e4a0"> <img src="../afj-release-1.png" alt="afj-release-1.png" style="margin:auto; display:block; width:400px"></img> <figcaption> <span class="figure-number">Figure 3: </span>Release Tag Variable</figcaption></figure></div>
</div>

 <div id="outline-container-org498a888" class="outline-2">
 <h2 id="org498a888">Create a new ticket  <i class="fa-solid fa-ticket"></i></h2>
 <div class="outline-text-2" id="text-org498a888">
 <p>
I then used the 'If: Matches' conditional module to verify if  <code>backstageLatest</code> is greater than the release number in the custom release field. If it is, then I want to create a new ticket in the backlog with:
</p>

 <ul class="org-ul"> <li>Summary: Backstage  <code>{{backstageLatest}}</code> New Release</li>

 <li>Description:  <code>{{webResponse.body.body}}</code></li>

 <li>Label: On-going Backstage Maintenance</li>
</ul> <p>
If the conditions don't match, the automation doesn't perform any actions.
</p>


 <figure id="orgc02bd71"> <img src="../afj-release-2.png" alt="afj-release-2.png" style="margin:auto; display:block; width:400px"></img> <figcaption> <span class="figure-number">Figure 4: </span>Backstage Latest Variable</figcaption></figure></div>
</div>

 <div id="outline-container-org2cb95ff" class="outline-2">
 <h2 id="org2cb95ff">Conclusion  <i class="fa-solid fa-flag-checkered"></i></h2>
 <div class="outline-text-2" id="text-org2cb95ff">
 <p>
By following the above steps, you can set up a process to automatically monitor GitHub releases and track your dependencies. This will save you time and effort to manually check for new releases.
</p>

 <p>
Future suggestions/ideas:
</p>

 <ul class="org-ul"> <li>Trigger builds in your CI/CD if conditionals pass, or a status matches 'release'</li>

 <li>Enrich tickets but using Key Values from the json response to further automate the process</li>

 <li> <p>
Use this idea for other dependencies
</p>

 <p>
If you have any other ideas or questions please reach out.  <i class="fa-regular fa-heart"></i>
</p></li>
</ul></div>
</div>
</div>]]></description>
  <link>https://blog.mbrig.nl/posts/./release-monitoring-in-jira.html</link>
  <guid isPermaLink="false">https://blog.mbrig.nl/posts/./release-monitoring-in-jira.html</guid>
  <pubDate>Sat, 08 Feb 2025 19:15:13 +0000</pubDate>
</item>
<item>
  <title>Emacs with aspell/ispell on Nix Darwin</title>
  <description><![CDATA[<div id="content" class="content">
 <div id="outline-container-org2e87758" class="outline-2">
 <h2 id="org2e87758">British English and Emacs</h2>
 <div class="outline-text-2" id="text-org2e87758">
 <div class="PREVIEW" id="org83685db">
 <p>
I like writing and was keen to introduce an on-the-fly spellchecker in Emacs. Ispell is built in to the current version I'm using (29.1). However it was locked to the default US dictionary. Easy fix right?
</p>

</div>
</div>

 <div id="outline-container-org79b9904" class="outline-3">
 <h3 id="org79b9904">Discoveries</h3>
 <div class="outline-text-3" id="text-org79b9904">
 <p>
Out the box the latest version of ispell on Nix Packages and built in Emacs does not have UK/British English default. So I started looking on Reddit and Googled ispell and Nix to see where I could go.
</p>
</div>
</div>

 <div id="outline-container-org352e4c3" class="outline-3">
 <h3 id="org352e4c3">Emacs philosophy and approach</h3>
 <div class="outline-text-3" id="text-org352e4c3">
 <p>
I am a strong believer in keeping things simple and with the introduction of 'use-package' and the extra features in 29.1 I was keen to rewrite my config and use as close to vanilla setup as possible. I took the very base of what was needed and started from scratch building outward and exploring built-in packages. My config file is available here:  <a href="https://github.com/mbrignall/nix-darwin">nix-darwin repo</a>
</p>
</div>
</div>

 <div id="outline-container-orgb69194a" class="outline-3">
 <h3 id="orgb69194a">Emacs Aspell/Ispell config</h3>
 <div class="outline-text-3" id="text-orgb69194a">
 <p>
Add this to your  <code>init.el</code>:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp"> <span class="org-comment-delimiter">;; </span> <span class="org-comment">Spellcheck</span>
( <span class="org-keyword">require</span> ' <span class="org-constant">ispell</span>)
( <span class="org-keyword">setq</span> ispell-program-name  <span class="org-string">"aspell"</span>)

( <span class="org-keyword">dolist</span> (hook '(text-mode-hook))
  (add-hook hook ( <span class="org-keyword">lambda</span> () (flyspell-mode 1))))
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgcad432d" class="outline-3">
 <h3 id="orgcad432d">NixOS/ Nix Darwin</h3>
 <div class="outline-text-3" id="text-orgcad432d">
 <p>
With the emphasis on declarative, reproducible systems, I've been using Nix for some time now. I have a config for Linux/NixOS outside of work, when at work I use a Macbook so have a Nix Darwin build for that. The addition of  <code>aspell</code> with dictionaries was surprisingly simple once I'd worked out how to declare it in my configuration file:
</p>

 <p>
</p> <pre class="src src-nix">
 <span class="org-comment-delimiter"># </span> <span class="org-comment">System Packages</span>
 <span class="org-keyword">environment.systemPackages</span> = with  <span class="org-constant">pkgs</span>; [
 <span class="org-comment-delimiter">  # </span> <span class="org-comment">Applications</span>
  ( <span class="org-keyword">aspellWithDicts</span> ( <span class="org-constant">dicts:</span> with dicts;  <span class="org-string">[ en en-computers en-science ]</span>))
 <span class="org-constant">  ispell</span>
 <span class="org-comment-delimiter">  # </span> <span class="org-comment">Other Packages</span>
];</pre>

</div>
</div>
</div>
</div>]]></description>
  <link>https://blog.mbrig.nl/posts/./emacs-ispell-aspell.html</link>
  <guid isPermaLink="false">https://blog.mbrig.nl/posts/./emacs-ispell-aspell.html</guid>
  <pubDate>Sat, 08 Feb 2025 19:15:13 +0000</pubDate>
</item>
</channel>
</rss>
