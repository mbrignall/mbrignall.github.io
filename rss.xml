<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<author><name>mbrignall</name></author>
<title>mblognl</title>
<description>moments of clarity, shared.</description>
<generator>Emacs webfeeder.el</generator>
<link>https://blog.mbrig.nl</link>
<atom:link href="https://blog.mbrig.nl/rss.xml" rel="self" type="application/rss+xml"/>
<lastBuildDate>Fri, 11 Oct 2024 22:03:46 +0000</lastBuildDate>
<item>
  <title>Release Monitoring with Automation for Jira</title>
  <description><![CDATA[<div id="content" class="content">
 <div id="outline-container-org2fade8e" class="outline-2">
 <h2 id="org2fade8e"> <i class="fa-regular fa-heart"></i> We like automation, we like monitoring releases</h2>
 <div class="outline-text-2" id="text-org2fade8e">
 <p>
So your organisation has decided to build a Internal Developer Portal (IDP) using Backstage. All of a sudden you're responsible for looking after a quickly growing, forever updating production environment, as well as an IDP? You may even have a request from your SEM along the lines of this:
</p>

 <blockquote>
 <p>
Monthly there is a version bump of Backstage (i.e 1.14.x -> 1.15.0)
We need to keep up with these releases as this reduces issues with security etc - however with this release we also need to update the plugin dependencies.
</p>
</blockquote>

 <p>
What do you do about:
</p>

 <ul class="org-ul"> <li>Monitoring new releases</li>
 <li>Making decisions about new features</li>
 <li>Breaking changes</li>
 <li>Plugins breaking</li>
</ul> <p>
You monitor the releases in a Jira project backlog of course!
</p>
</div>
</div>

 <div id="outline-container-org9243a92" class="outline-2">
 <h2 id="org9243a92"> <i class="fa-solid fa-robot"></i> Here is how I did it with automationâ€¦</h2>
 <div class="outline-text-2" id="text-org9243a92">
 <p>
I wanted to create a new task whenever a new release of Backstage is rolled out on the main Github page  <i class="fa-brands fa-github-alt"></i>  <a href="https://github.com/backstage/backstage">backstage/backstage</a>. The task could then be broken down into smaller pieces of work or spikes so I could monitor builds or raise pull requests directly from Jira using the GitHub integration.
</p>
</div>
</div>

 <div id="outline-container-orgcd7d8d9" class="outline-2">
 <h2 id="orgcd7d8d9"> <i class="fa-regular fa-calendar"></i> Setting up the Schedule</h2>
 <div class="outline-text-2" id="text-orgcd7d8d9">
 <p>
For the scheduled automation to work I created a custom field in Jira called 'Release Tag', which is where the release tag will be stored.
</p>

 <p>
The specifics of the JQL might need adjusting depending on your circumstances but an example may go like:
</p>

 <p>
 <code>issuetype = epic and 'Release Tag' is not EMPTY</code>
</p>

 <p>
Because the scheduled automation requires a ticket to be present I had to make a 'dummy' ticket with the release tag of a previous release added to it, so when the schedule runs the JQL can find a ticket and trigger the subsequent automation. There is a space at the bottom of the following example when you're creating a scheduled automation to add JQL.
</p>


 <figure id="org948117e"> <img src="../afj-release.png" alt="afj-release.png" style="margin:auto; display:block; width:100%"></img> <figcaption> <span class="figure-number">Figure 1: </span>Schedule the Automation</figcaption></figure></div>
</div>

 <div id="outline-container-orga6cdec3" class="outline-2">
 <h2 id="orga6cdec3"> <i class="fa-solid fa-globe"></i> The Web Request</h2>
 <div class="outline-text-2" id="text-orga6cdec3">
 <p>
The automation will make a request to a public endpoint, so there was need for a Personal Access Token (PAT). Since the request frequency is once a day, it remains within rate limits. The request is made to the following URL:
</p>

 <p>
 <a href="https://api.github.com/repos/backstage/backstage/releases/latest">API for Latest Release</a>
</p>

 <p>
Then I added optional headers to ensure the content type is correctly interpreted:
</p>

 <p>
 <code>Content-Type: application/json</code>
</p>

 <p>
This is a GET HTTP method, and I didn't anticipate any issue references in the body, simply can choose 'Empty'.
</p>

 <p>
 <b>It's crucial to delay execution until we receive a response from this web request!</b>
</p>


 <figure id="org500194f"> <img src="../afj-release-3.png" alt="afj-release-3.png" style="margin:auto; display:block; width:100%"></img> <figcaption> <span class="figure-number">Figure 2: </span>Web Request Example</figcaption></figure></div>
</div>

 <div id="outline-container-orgc2b34d1" class="outline-2">
 <h2 id="orgc2b34d1"> <i class="fa-solid fa-check"></i> Create Variable</h2>
 <div class="outline-text-2" id="text-orgc2b34d1">
 <p>
The web response body will look a bit like the snipped example:
</p>

 <div class="org-src-container">
 <pre class="src src-js">}
   <span class="org-comment-delimiter">// </span> <span class="org-comment">...</span>
   <span class="org-string">"node_id"</span>:  <span class="org-string">"RE_kwDODhKIWM4Gb0sX"</span>,
   <span class="org-string">"tag_name"</span>:  <span class="org-string">"v1.14.2"</span>,
   <span class="org-string">"target_commitish"</span>:  <span class="org-string">"master"</span>,
   <span class="org-string">"name"</span>:  <span class="org-string">"v1.14.2"</span>,
   <span class="org-string">"draft"</span>:  <span class="org-constant">false</span>,
   <span class="org-string">"prerelease"</span>:  <span class="org-constant">false</span>,
   <span class="org-string">"created_at"</span>:  <span class="org-string">"2023-06-09T09:30:18Z"</span>,
   <span class="org-string">"published_at"</span>:  <span class="org-string">"2023-06-09T09:30:19Z"</span>,
   <span class="org-string">"assets"</span>: [

  ],
   <span class="org-string">"tarball_url"</span>:  <span class="org-string">"https://api.github.com/repos/backstage/backstage/tarball/v1.14.2"</span>,
   <span class="org-string">"zipball_url"</span>:  <span class="org-string">"https://api.github.com/repos/backstage/backstage/zipball/v1.14.2"</span>,
   <span class="org-string">"body"</span>:  <span class="org-string">"This release fixes an issue where the search bar styling would break."</span>,
  <span class="org-comment-delimiter">// </span> <span class="org-comment">...</span>
}
</pre>
</div>

 <p>
To extract the  <code>tag_name</code>, I created a variable using the newer feature, referring to the  <code>{{webResponse.body}}</code> (the curly brackets are to use Jira smart values) to retrieve the response body, and then pointing to the  <code>tag_name</code>. This creates a variable named  <code>backstageLatest</code> that can be referenced in subsequent actions.
</p>


 <figure id="orgdfead54"> <img src="../afj-release-1.png" alt="afj-release-1.png" style="margin:auto; display:block; width:100%"></img> <figcaption> <span class="figure-number">Figure 3: </span>Release Tag Variable</figcaption></figure></div>
</div>

 <div id="outline-container-orgda8515e" class="outline-2">
 <h2 id="orgda8515e"> <i class="fa-solid fa-ticket"></i> Create a new ticket</h2>
 <div class="outline-text-2" id="text-orgda8515e">
 <p>
I then used the 'If: Matches' conditional module to verify if  <code>backstageLatest</code> is greater than the release number in the custom release field. If it is, then I want to create a new ticket in the backlog with:
</p>

 <ul class="org-ul"> <li>Summary: Backstage  <code>{{backstageLatest}}</code> New Release</li>

 <li>Description:  <code>{{webResponse.body.body}}</code></li>

 <li>Label: On-going Backstage Maintenance</li>
</ul> <p>
If the conditions don't match, the automation doesn't perform any actions.
</p>


 <figure id="org1b455b9"> <img src="../afj-release-2.png" alt="afj-release-2.png" style="margin:auto; display:block; width:100%"></img> <figcaption> <span class="figure-number">Figure 4: </span>Backstage Latest Variable</figcaption></figure></div>
</div>

 <div id="outline-container-org74c0cf5" class="outline-2">
 <h2 id="org74c0cf5"> <i class="fa-solid fa-flag-checkered"></i> Conclusion</h2>
 <div class="outline-text-2" id="text-org74c0cf5">
 <p>
By following the above steps, you can set up a process to automatically monitor GitHub releases and track your dependencies. This will save you time and effort to manually check for new releases.
</p>

 <p>
Future suggestions/ideas:
</p>

 <ul class="org-ul"> <li>Trigger builds in your CI/CD if conditionals pass, or a status matches 'release'</li>

 <li>Enrich tickets but using Key Values from the json response to further automate the process</li>

 <li> <p>
Use this idea for other dependencies
</p>

 <p>
If you have any other ideas or questions please reach out.  <i class="fa-regular fa-heart"></i>
</p></li>
</ul></div>
</div>
</div>]]></description>
  <link>https://blog.mbrig.nl/posts/./20241011-release-monitoring-in-jira.html</link>
  <guid isPermaLink="false">https://blog.mbrig.nl/posts/./20241011-release-monitoring-in-jira.html</guid>
  <pubDate>Fri, 11 Oct 2024 22:03:46 +0000</pubDate>
</item>
<item>
  <title>Emacs with aspell/ispell on Nix Darwin</title>
  <description><![CDATA[<div id="content" class="content">
 <div id="outline-container-orgf609054" class="outline-2">
 <h2 id="orgf609054">British English and Emacs</h2>
 <div class="outline-text-2" id="text-orgf609054">
 <p>
I like writing and was keen to introduce an on-the-fly spellchecker in Emacs. Ispell is built in to the current version I'm using (29.1). However it was locked to the default US dictionary. Easy fix right?
</p>
</div>

 <div id="outline-container-orgbce2320" class="outline-3">
 <h3 id="orgbce2320">Discoveries</h3>
 <div class="outline-text-3" id="text-orgbce2320">
 <p>
Out the box the latest version of ispell on Nix Packages and built in Emacs does not have UK/British English default. So I started looking on Reddit and Googled ispell and Nix to see where I could go.
</p>
</div>
</div>

 <div id="outline-container-orgdf1d3b8" class="outline-3">
 <h3 id="orgdf1d3b8">Emacs philosophy and approach</h3>
 <div class="outline-text-3" id="text-orgdf1d3b8">
 <p>
I am a strong believer in keeping things simple and with the introduction of 'use-package' and the extra features in 29.1 I was keen to rewrite my config and use as close to vanilla setup as possible. I took the very base of what was needed and started from scratch building outward and exploring built-in packages. My config file is available here:  <a href="https://github.com/mbrignall/nix-darwin">nix-darwin repo</a>
</p>
</div>
</div>

 <div id="outline-container-org9fa022d" class="outline-3">
 <h3 id="org9fa022d">Emacs Aspell/Ispell config</h3>
 <div class="outline-text-3" id="text-org9fa022d">
 <p>
Add this to your  <code>init.el</code>:
</p>

 <div class="org-src-container">
 <pre class="src src-elisp"> <span class="org-comment-delimiter">;; </span> <span class="org-comment">Spellcheck</span>
( <span class="org-keyword">require</span> ' <span class="org-constant">ispell</span>)
( <span class="org-keyword">setq</span> ispell-program-name  <span class="org-string">"aspell"</span>)

( <span class="org-keyword">dolist</span> (hook '(text-mode-hook))
  (add-hook hook ( <span class="org-keyword">lambda</span> () (flyspell-mode 1))))
</pre>
</div>
</div>
</div>

 <div id="outline-container-org48e6e40" class="outline-3">
 <h3 id="org48e6e40">NixOS/ Nix Darwin</h3>
 <div class="outline-text-3" id="text-org48e6e40">
 <p>
With the emphasis on declarative, reproducible systems, I've been using Nix for some time now. I have a config for Linux/NixOS outside of work, when at work I use a Macbook so have a Nix Darwin build for that. The addition of  <code>aspell</code> with dictionaries was surprisingly simple once I'd worked out how to declare it in my configuration file:
</p>

 <div class="org-src-container">
 <pre class="src src-nix"># System packages
environment.systemPackages = with pkgs; [
  # Applications
  (aspellWithDicts (dicts: with dicts; [ en en-computers en-science ]))
  ispell
  # other packages
];
</pre>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>https://blog.mbrig.nl/posts/./20241004-emacs-ispell-aspell.html</link>
  <guid isPermaLink="false">https://blog.mbrig.nl/posts/./20241004-emacs-ispell-aspell.html</guid>
  <pubDate>Fri, 11 Oct 2024 22:03:46 +0000</pubDate>
</item>
</channel>
</rss>
